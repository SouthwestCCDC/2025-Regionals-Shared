name: PR Analysis

on:
  pull_request:
    branches: [main,]

jobs:
  required:
    timeout-minutes: 1
    runs-on: ubuntu-latest
    needs:
      - check-encrypted-files
      - check-compressed-files
      - check-line-and-character-limits
      - check-binary-files
      - check-school-md-content
    if: always()
    steps:
      - run: jq -e 'all(.[].result; . == "success")' <<< "$NEEDS"
        env:
          NEEDS: ${{ toJSON(needs) }}

  check-encrypted-files:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout PR Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for Encrypted Files
        run: |
          find . -type f \( -iname "*.gpg" -o -iname "*.pgp" -o -iname "*.asc" -o -iname "*.kdbx" \) \( ! -path "./.git/*" ! -path "./.github/*" \) > /tmp/encrypted_files.txt
          if [ -s /tmp/encrypted_files.txt ]; then
            echo "Encrypted GPG files detected:" && cat /tmp/encrypted_files.txt && exit 1
          fi

      - name: Check for PGP Encrypted Files
        run: |
          find . -type f \( ! -path "./.git/*" ! -path "./.github/*" \) -exec file {} + | tee /tmp/file_output.txt
          grep -E "PGP (message|encrypted data|private key block)" /tmp/file_output.txt > /tmp/pgp_files.txt || true
          if [ -s /tmp/pgp_files.txt ]; then
            echo "PGP encrypted files detected:"
            cat /tmp/pgp_files.txt
            exit 1
          fi

  check-compressed-files:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout PR Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Check for Compressed Files
        run: |
          find . -type f \( -iname "*.zip" -o -iname "*.tar.gz" -o -iname "*.tgz" -o -iname "*.rar" -o -iname "*.7z" -o -iname "*.bz2" -o -iname "*.xz" \) \( ! -path "./.git/*" ! -path "./.github/*" \) > /tmp/compressed_files.txt
          if [ -s /tmp/compressed_files.txt ]; then
            echo "Compressed files detected:" && cat /tmp/compressed_files.txt && exit 1
          fi

  check-line-and-character-limits:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout PR Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Check Line and Character Limits
        run: |
          find . -type d \( ! -path "./.git" ! -path "./.github" \) -mindepth 1 -maxdepth 1 | while read dir; do
            total_lines=$(find "$dir" -type f \( ! -iname "*.pdf" ! -iname "*.doc" ! -iname "*.png" ! -iname "*.ppt" \) -print0 | xargs -0 cat | wc -l)
            if [ "$total_lines" -gt 15000 ]; then
              echo "Total number of lines in $dir exceeds 15,000: $total_lines" && exit 1
            fi
            find "$dir" -type f \( ! -iname "*.pdf" ! -iname "*.doc" ! -iname "*.png" ! -iname "*.ppt" \) -print0 |
            xargs -0 awk 'length > 400 {print FILENAME " has a line exceeding 400 characters"; exit 1}'
          done

  check-binary-files:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout PR Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Check for Binary Files
        run: |
          find . -type f \( ! -path "./.git/*" ! -path "./.github/*" \) -exec file --mime {} + |
          grep -vE 'text|application/pdf|application/msword|image/png|application/vnd.ms-powerpoint' | tee /tmp/binary_files.txt | 
          grep -q . && { echo 'Binary files detected!'; cat /tmp/binary_files.txt; exit 1; } || echo "No binary files found"

  check-school-md-content:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout PR Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Check school.md Content
        run: |
          find . -type d \( ! -iname ".git" ! -iname "*.github" \) -mindepth 1 -maxdepth 1 | while read dir; do
            if [ ! -s "$dir/school.md" ]; then
              echo "school.md is missing or empty in $dir" && exit 1
            fi
          done

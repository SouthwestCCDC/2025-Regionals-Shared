[Service]

# ------------------------------------------------------------------------------

## Uncomment to see what files/capabilities a service needs access to
#SystemCallFilter=@debug
#ExecStart=
#ExecStart=/usr/bin/strace --failed-only --follow-forks /usr/sbin/generic_service
## Needed because strace prevents signaling a successful start
#TimeoutStartSec=infinity

# ------------------------------------------------------------------------------

# Restart service after 10 seconds if it fails for any reason
Restart=on-failure
RestartSec=10s

# ------------------------------------------------------------------------------
# Default hardening

# Make most of the system read-only (overrides TemporaryFileSystem)
# ProtectSystem=strict

# Only show files that have been explicitly bound
TemporaryFileSystem=/:ro /var/log

# Needed for systemd service signaling
BindReadOnlyPaths=-/dev/log -/run/systemd/journal/socket -/run/systemd/journal/stdout
BindReadOnlyPaths=-/run/dbus/system_bus_socket

# Prevent executing files from unusual directories (overrides TemporaryFileSystem)
# NoExecPaths=/
# ExecPaths=-/bin -/sbin -/usr/bin -/usr/sbin -/lib -/lib64 -/usr/lib -/usr/lib64 -/usr/libexec

# Allow accessing libraries
BindReadOnlyPaths=-/lib -/lib64 -/usr/lib -/usr/lib64 -/usr/libexec

# Set up devices
PrivateTmp=true
PrivateDevices=true
ProtectHome=true
ProtectHostname=true
ProtectClock=true
ProtectKernelTunables=true
ProtectKernelModules=true
ProtectControlGroups=true

# (Needs v242 or later)
ProcSubset=pid
ProtectHostname=true

# (Needs v245 or later)
ProtectClock=true

# (Needs v247 or later)
ProtectProc=invisible

# (Needs v250 or later)
ProtectKernelLogs=true

RemoveIPC=true

# ------------------------------------------------------------------------------
# Mount directories and temporary directories

# adds /var/cache/generic_service
CacheDirectory=generic_service
CacheDirectoryMode=0700
# adds /run/generic_service
RuntimeDirectory=generic_service
RuntimeDirectoryMode=0700
# adds /var/log/generic_service
LogsDirectory=generic_service
LogsDirectoryMode=0750
# adds /var/lib/generic_service
StateDirectory=generic_service
StateDirectoryMode=0700
# adds /etc/generic_service
ConfigurationDirectory=generic_service
ConfigurationDirectoryMode=0700


# Add the executable itself
BindReadOnlyPaths=/usr/bin/generic_service

# Make paths read/write
# BindPaths format:
#   BindPaths=/path/to/source
#   BindPaths=-/path/to/maybe/existing/source
#   BindPaths=/path/to/source:/path/to/destination

#BindReadOnlyPaths=-/service/reads/here
#BindPaths=-/service/writes/here

# ------------------------------------------------------------------------------
# Capabilities and privileges

# Likely to break things
#NoNewPrivileges=true

# Grant access to a capability if the unit doesn't have it already
AmbientCapabilities=CAP_NET_BIND_SERVICE

#CapabilityBoundingSet=CAP_BLOCK_SUSPEND                   # Service may establish wake locks
#CapabilityBoundingSet=CAP_CHOWN CAP_FSETID CAP_SETFCAP    # Service may change file ownership/access mode/capabilities unrestricted
#CapabilityBoundingSet=CAP_FOWNER CAP_IPC_OWNER            # Service may override UNIX file/IPC permission checks
#CapabilityBoundingSet=CAP_IPC_LOCK                        # Service may lock memory into RAM
#CapabilityBoundingSet=CAP_KILL                            # Service may send UNIX signals to arbitrary processes
#CapabilityBoundingSet=CAP_LEASE                           # Service may create file leases
#CapabilityBoundingSet=CAP_LINUX_IMMUTABLE                 # Service may mark files immutable
#CapabilityBoundingSet=CAP_MKNOD                           # Service may create device nodes
#CapabilityBoundingSet=CAP_NET_ADMIN                       # Service has network configuration privileges
CapabilityBoundingSet=CAP_NET_BIND_SERVICE                 # Service can bind ports
#CapabilityBoundingSet=CAP_NET_BROADCAST CAP_NET_RAW       # Service has elevated networking privileges
#CapabilityBoundingSet=CAP_RAWIO                           # Service has raw I/O access
#CapabilityBoundingSet=CAP_SETUID CAP_SETGID               # Service may change UID/GID identities
#CapabilityBoundingSet=CAP_SETPCAP                         # Service may change UID/GID capabilities
#CapabilityBoundingSet=CAP_SYS_ADMIN                       # Service has administrator privileges
#CapabilityBoundingSet=CAP_SYS_BOOT                        # Service may issue reboot()
#CapabilityBoundingSet=CAP_SYS_CHROOT                      # Service may issue chroot()
#CapabilityBoundingSet=CAP_SYSLOG                          # Service has access to kernel logging
#CapabilityBoundingSet=CAP_SYS_MODULE                      # Service may load kernel modules
#CapabilityBoundingSet=CAP_SYS_NICE CAP_SYS_RESOURCE       # Service has privileges to change resource use parameters
#CapabilityBoundingSet=CAP_SYS_PACCT                       # Service may use acct()
#CapabilityBoundingSet=CAP_SYS_PTRACE                      # Service has ptrace() debugging abilities
#CapabilityBoundingSet=CAP_SYS_TIME                        # Service processes may change the system clock
#CapabilityBoundingSet=CAP_SYS_TTY_CONFIG                  # Service may issue vhangup()
#CapabilityBoundingSet=CAP_WAKE_ALARM                      # Service may program timers that wake up the system

RestrictAddressFamilies=AF_UNIX AF_INET AF_INET6

# (Needs v249 or later) Restrict ports the service can listen on
SocketBindAllow=tcp:80
SocketBindAllow=tcp:443
SocketBindDeny=any

# ------------------------------------------------------------------------------

LockPersonality=true
RestrictRealtime=true
RestrictNamespaces=true
RestrictSUIDSGID=true

# Risk of breaking JIT compilers or dynamic code
MemoryDenyWriteExecute=true

SystemCallFilter=@system-service
SystemCallFilter=~@mount @reboot @raw-io @clock @module @reboot @obsolete \
    @cpu-emulation @memlock @resources
SystemCallErrorNumber=EPERM
SystemCallArchitectures=native

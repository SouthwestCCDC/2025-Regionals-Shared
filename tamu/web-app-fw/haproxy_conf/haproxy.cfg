global
	log /dev/log	local0
	log /dev/log	local1 notice
	daemon

	# See: https://ssl-config.mozilla.org/#server=haproxy&server-version=2.0.3&config=intermediate
	ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
	ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
	ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets

	tune.lua.bool-sample-conversion normal
	tune.ssl.capture-buffer-size 96
	lua-load /etc/haproxy/ja4.lua

defaults
	log	global
	mode	http
	option	dontlognull
	log-format "%{+json}o %(client_ip)ci %(client_port)cp %(request_date)tr %(fe_name_transport)ft %(be_name)b %(status_code)ST %(bytes_read)B %(captured_request_headers)hr %(captured_response_headers)hs %(http_request){+Q}r"
	timeout connect 5000
	timeout client  50000
	timeout server  50000

# Used to keep data from stick tables when reloading the service
peers persist_st
	peer host 127.0.0.1:10000

# Stick table - Record number of http requests in the last 1m
backend st_rate_limit
	stick-table type ipv6 size 10k expire 10m store http_req_rate(1m) peers persist_st

# Stick table - Record number of waf blocks in the last 10s. Used to make
# quickly repeating requests get blocked immediately until the client slows down
backend st_waf_debounce
	stick-table type ipv6 size 10k expire 1m store gpc0_rate(10s) peers persist_st

# Stick table - Record number of waf blocks in the last 1h. Used to keep a
# client blocked for a while if it triggers too many blocks
backend st_waf_trigger
	stick-table type ipv6 size 10k expire 2h store gpc0_rate(1h) peers persist_st



frontend incoming_http
	# Ports that haproxy will listen on
	bind :80
	bind :443 ssl crt /etc/haproxy/server.pem

	log-format "%{+json}o %(client_ip)ci %(client_port)cp %(request_date)tr %(fe_name_transport)ft %(unique_id)ID %(be_name)b %(status_code)ST %(bytes_read)B %(JA4_hash)[capture.req.hdr(1)] JOINNEXTLINE
%(JA4_app_match)[capture.req.hdr(2)] %(JA4_block_rule)[capture.req.hdr(3)] %(JA4_allow_rule)[capture.req.hdr(4)] %(IP_block_rule)[capture.req.hdr(5)] %(IP_allow_rule)[capture.req.hdr(6)] JOINNEXTLINE
%(modsecurity_code)[capture.req.hdr(7)] %(block_reason)[capture.req.hdr(8)] %(captured_response_headers)hs %(http_request){+Q}r %(user_agent)[capture.req.hdr(0)]"

	http-request capture req.hdr(User-Agent) len 512

	# Calculate ja4 hash and log
	http-request lua.fingerprint_ja4
	http-request set-var(txn.fingerprint_app) var(txn.fingerprint_ja4),map(/etc/haproxy/ja4_names.map)
	http-request capture var(txn.fingerprint_ja4) len 36
	http-request capture var(txn.fingerprint_app) len 200

	# Check JA4 allow/blocklists
	acl ja4_allow var(txn.fingerprint_ja4) -m beg -M -f /etc/haproxy/ja4_allow.map
	acl ja4_block var(txn.fingerprint_ja4) -m beg -M -f /etc/haproxy/ja4_block.map
	http-request set-var(txn.ja4_block_match) var(txn.fingerprint_ja4),map(/etc/haproxy/ja4_block.map)
	http-request set-var(txn.ja4_allow_match) var(txn.fingerprint_ja4),map(/etc/haproxy/ja4_allow.map)
	http-request capture var(txn.ja4_block_match) len 200
	http-request capture var(txn.ja4_allow_match) len 200

	# Check IP allow/blocklists
	acl ip_allow src -m ip -M -f /etc/haproxy/ip_allow.map
	acl ip_block src -m ip -M -f /etc/haproxy/ip_block.map
	http-request set-var(txn.ip_block_match) src,map_ip(/etc/haproxy/ip_block.map)
	http-request set-var(txn.ip_allow_match) src,map_ip(/etc/haproxy/ip_allow.map)
	http-request capture var(txn.ip_block_match) len 200
	http-request capture var(txn.ip_allow_match) len 200

	# Use stick tables to record & check rate limits
	http-request track-sc0 src table st_rate_limit
	http-request track-sc1 src table st_waf_debounce
	http-request track-sc2 src table st_waf_trigger

	# Configuration for rate limit speed. Active if this many requests have
	# been made in the last 1m. See backend st_rate_limit's http_req_rate(1m)
	# setting
	acl rate_limit_high sc0_http_req_rate(st_rate_limit) gt 100
	acl rate_limit_low  sc0_http_req_rate(st_rate_limit) gt 20

	# Run the request through modsecurity to check for malicious input
	filter spoe engine modsecurity config /etc/haproxy/spoe-modsecurity.conf
	http-request capture var(txn.modsec.code) len 8

	acl modsec_block var(txn.modsec.code) -m int gt 0 # Will return 403 if block is recommended

	# Configurations for blocking based on previous blocks for this IP
	acl trigger sc2_gpc0_rate(st_waf_trigger) gt 40
	acl trigger_debounce sc1_gpc0_rate(st_waf_debounce) gt 0

	# Allow some hosts anyways
	acl allow_host hdr(host) -i some.host.invalid:9999

	# Boolean for if the request should be blocked
	acl waf_triggered acl(ip_block) -m bool true
	acl waf_triggered acl(ja4_block) -m bool true
	acl waf_triggered acl(rate_limit_high) -m bool true
	acl waf_triggered acl(rate_limit_low) -m bool true
	acl waf_triggered acl(modsec_block) -m bool true
	acl waf_triggered acl(trigger_debounce) -m bool true
	acl waf_triggered acl(trigger) -m bool true

	# Set block reason in log
	http-request set-var(txn.block_reason) str("n/a") if !waf_triggered
	http-request set-var(txn.block_reason) str("Recent block - debounce") if trigger_debounce
	http-request set-var(txn.block_reason) str("ModSecurity triggered") if modsec_block
	http-request set-var(txn.block_reason) str("Rate limit - low") if rate_limit_low
	http-request set-var(txn.block_reason) str("Rate limit - high") if rate_limit_high
	http-request set-var(txn.block_reason) str("High block rate") if trigger
	http-request set-var(txn.block_reason) str("JA4 block") if ja4_block
	http-request set-var(txn.block_reason) str("IP block") if ip_block
	http-request capture var(txn.block_reason) len 24

	# Increment stick table counters for st_waf_debounce and st_waf_trigger
	http-request sc-inc-gpc0(1) if waf_triggered
	http-request sc-inc-gpc0(2) if waf_triggered

	# Send a 429 response if the client is making way too many requests
	http-request deny deny_status 429 if rate_limit_high !ip_allow !ja4_allow !allow_host

	# Otherwise choose backend based on whether the request was blocked. Sends
	# a 200 status code regardless of whether it was blocked.
	use_backend backend_normal if ip_allow || ja4_allow || allow_host
	use_backend backend_ban if waf_triggered
	default_backend backend_normal

backend spoe-modsecurity
	mode tcp
	server modsec-spoa 127.0.0.1:19824

backend backend_ban
	server banserver 127.0.0.1:23610

# Edit this to point the the actual server this firewall is protecting!
backend backend_normal
	server normalserver 127.0.0.1:2222
